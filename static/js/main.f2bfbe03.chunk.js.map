{"version":3,"sources":["components/DateTimePretty.jsx","components/DateTime.jsx","components/Video.jsx","components/VideoList.jsx","App.js","serviceWorker.js","index.js"],"names":["WrappedComponent","displayDate","number","titles","minutes","hours","days","DateTimePretty","props","className","date","getRelativeTime","timeDiff","Date","minsDiff","Math","floor","hoursDiff","MIN","daysDiff","HOUR","this","Component","Video","title","src","url","allowFullScreen","VideoList","list","map","item","key","shortid","generate","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KAoBiBA,E,2FAjBXC,EAAc,SAACC,EAAQC,GAE3B,OAAOA,EACLD,EAAS,IAAM,GAAKA,EAAS,IAAM,GAC/B,EAHQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAIlBA,EAAS,GAAK,EAAIA,EAAS,GAAK,KAIxCE,EAAU,CAAC,uCAAU,uCAAU,kCAC/BC,EAAQ,CAAC,qBAAO,2BAAQ,kCACxBC,EAAO,CAAC,2BAAQ,qBAAO,4BAkCdC,GA5BEP,EClBA,SAAAQ,GACf,OAAO,uBAAGC,UAAU,QAAQD,EAAME,ODkBlC,4MACEC,gBAAkB,WAChB,IAEMC,EAFc,IAAIC,KACF,IAAIA,KAAK,EAAKL,MAAME,MAGpCI,EAAWC,KAAKC,MAAMJ,EAXtB,KAYAK,EAAYF,KAAKC,MAAMJ,EAXtBM,MAYDC,EAAWJ,KAAKC,MAAMJ,EAXtBQ,OAaN,OAAIH,EAAY,EACR,GAAN,OAAUH,EAAV,YAAsBb,EAAYa,EAAUV,GAA5C,mCACSe,EAAW,EACd,GAAN,OAAUF,EAAV,YAAuBhB,EAAYgB,EAAWZ,GAA9C,mCAEI,GAAN,OAAUc,EAAV,YAAsBlB,EAAYkB,EAAUb,GAA5C,oCAfJ,uDAkBY,IACAI,EAASW,KAAKb,MAAdE,KACR,OAAO,kBAACV,EAAD,CAAkBU,KAAMW,KAAKV,gBAAgBD,SApBxD,GAAqBY,cETRC,EATD,SAACf,GACb,OACE,yBAAKC,UAAU,SACb,4BAAQe,MAAM,QAAQC,IAAKjB,EAAMkB,IAAKC,iBAAe,IACrD,kBAAC,EAAD,CAAgBjB,KAAMF,EAAME,SCGnBkB,EANG,SAAApB,GAChB,OAAOA,EAAMqB,KAAKC,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CAAOL,IAAKK,EAAKL,IAAKhB,KAAMqB,EAAKrB,KAAMsB,IAAKC,IAAQC,iBCHzC,SAASC,IAAO,IAAD,EACbC,mBAAS,CACtB,CACEV,IACE,gFACFhB,KAAM,uBAER,CACEgB,IACE,gFACFhB,KAAM,uBAER,CACEgB,IACE,gFACFhB,KAAM,uBAER,CACEgB,IACE,gFACFhB,KAAM,uBAER,CACEgB,IACE,gFACFhB,KAAM,uBAER,CACEgB,IACE,gFACFhB,KAAM,yBA7BHmB,EADqB,oBAkC5B,OAAO,kBAAC,EAAD,CAAWA,KAAMA,ICzBNQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACR,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f2bfbe03.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport DateTime from \"./DateTime\";\n\nconst displayDate = (number, titles) => {\n  const cases = [2, 0, 2, 5, 1, 2];\n  return titles[\n    number % 100 > 4 && number % 100 < 20\n      ? 2\n      : cases[number % 10 < 5 ? number % 10 : 5]\n  ];\n};\n\nconst minutes = [\"минута\", \"минуты\", \"минут\"];\nconst hours = [\"час\", \"часа\", \"часов\"];\nconst days = [\"день\", \"дня\", \"дней\"];\n\nconst MIN = 1000 * 60;\nconst HOUR = MIN * 60;\nconst DAY = HOUR * 24;\n\nconst dateHOC = (WrappedComponent) => {\n  return class extends Component {\n    getRelativeTime = () => {\n      const currentDate = new Date();\n      const componentDate = new Date(this.props.date);\n      const timeDiff = currentDate - componentDate;\n\n      const minsDiff = Math.floor(timeDiff / MIN);\n      const hoursDiff = Math.floor(timeDiff / HOUR);\n      const daysDiff = Math.floor(timeDiff / DAY);\n\n      if (hoursDiff < 1) {\n        return `${minsDiff} ${displayDate(minsDiff, minutes)} назад`;\n      } else if (daysDiff < 1) {\n        return `${hoursDiff} ${displayDate(hoursDiff, hours)} назад`;\n      }\n      return `${daysDiff} ${displayDate(daysDiff, days)} назад`;\n    };\n\n    render() {\n      const { date } = this.props;\n      return <WrappedComponent date={this.getRelativeTime(date)} />;\n    }\n  };\n};\n\nconst DateTimePretty = dateHOC(DateTime);\n\nexport default DateTimePretty;\n","import React from 'react';\n\nconst DateTime = props => {\n  return <p className=\"date\">{props.date}</p>;\n};\n\nexport default DateTime;\n","import React from \"react\";\nimport DateTimePretty from \"./DateTimePretty\";\n\nconst Video = (props) => {\n  return (\n    <div className=\"video\">\n      <iframe title=\"Video\" src={props.url} allowFullScreen />\n      <DateTimePretty date={props.date} />\n    </div>\n  );\n};\n\nexport default Video;\n","import React from 'react';\nimport shortid from 'shortid';\nimport Video from './Video';\n\nconst VideoList = props => {\n  return props.list.map(item => (\n    <Video url={item.url} date={item.date} key={shortid.generate()} />\n  ));\n};\n\nexport default VideoList;\n","import React, { useState } from \"react\";\nimport VideoList from \"./components/VideoList\";\n\nexport default function App() {\n  const [list] = useState([\n    {\n      url:\n        \"https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2017-07-31 13:24:00\",\n    },\n    {\n      url:\n        \"https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2020-03-03 12:10:00\",\n    },\n    {\n      url:\n        \"https://www.youtube.com/embed/xGRjCa49C6U?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2020-04-14 23:16:00\",\n    },\n    {\n      url:\n        \"https://www.youtube.com/embed/RK1K2bCg4J8?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2018-01-03 12:10:00\",\n    },\n    {\n      url:\n        \"https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2020-04-10 16:17:00\",\n    },\n    {\n      url:\n        \"https://www.youtube.com/embed/TxbE79-1OSI?rel=0&amp;controls=0&amp;showinfo=0\",\n      date: \"2017-12-02 05:24:00\",\n    },\n  ]);\n\n  return <VideoList list={list} />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}